/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace BattleShipGame {
  export type CoordinateStruct = {
    x: PromiseOrValue<BigNumberish>;
    y: PromiseOrValue<BigNumberish>;
  };

  export type CoordinateStructOutput = [number, number] & {
    x: number;
    y: number;
  };

  export type ShipShotProofStruct = {
    signature: PromiseOrValue<BytesLike>;
    shotBy: PromiseOrValue<string>;
  };

  export type ShipShotProofStructOutput = [string, string] & {
    signature: string;
    shotBy: string;
  };
}

export interface BattleShipGameInterface extends utils.Interface {
  functions: {
    "NO_PLAYERS()": FunctionFragment;
    "NO_SHIP_PIECES()": FunctionFragment;
    "RecoverSigner(bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "SplitSignature(bytes)": FunctionFragment;
    "destroyedPlayers(address)": FunctionFragment;
    "endTurn()": FunctionFragment;
    "getWinner()": FunctionFragment;
    "hasReportedShots()": FunctionFragment;
    "isGameOver()": FunctionFragment;
    "isGameStarted()": FunctionFragment;
    "isTurnOver()": FunctionFragment;
    "joinGame(bytes[])": FunctionFragment;
    "numberOfDestroyedPlayers()": FunctionFragment;
    "owner()": FunctionFragment;
    "playerHasPlacedShips(address)": FunctionFragment;
    "playerHasPlayed(address)": FunctionFragment;
    "playerHasReportedHits(address)": FunctionFragment;
    "playerShots(address)": FunctionFragment;
    "players(address)": FunctionFragment;
    "playersAddress(uint256)": FunctionFragment;
    "reportHits((bytes,address)[])": FunctionFragment;
    "takeAShot((uint8,uint8))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "NO_PLAYERS"
      | "NO_SHIP_PIECES"
      | "RecoverSigner"
      | "SplitSignature"
      | "destroyedPlayers"
      | "endTurn"
      | "getWinner"
      | "hasReportedShots"
      | "isGameOver"
      | "isGameStarted"
      | "isTurnOver"
      | "joinGame"
      | "numberOfDestroyedPlayers"
      | "owner"
      | "playerHasPlacedShips"
      | "playerHasPlayed"
      | "playerHasReportedHits"
      | "playerShots"
      | "players"
      | "playersAddress"
      | "reportHits"
      | "takeAShot"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "NO_PLAYERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NO_SHIP_PIECES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RecoverSigner",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "SplitSignature",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "destroyedPlayers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "endTurn", values?: undefined): string;
  encodeFunctionData(functionFragment: "getWinner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hasReportedShots",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isGameOver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isGameStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTurnOver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "joinGame",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfDestroyedPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerHasPlacedShips",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "playerHasPlayed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "playerHasReportedHits",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "playerShots",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "playersAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "reportHits",
    values: [BattleShipGame.ShipShotProofStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "takeAShot",
    values: [BattleShipGame.CoordinateStruct]
  ): string;

  decodeFunctionResult(functionFragment: "NO_PLAYERS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "NO_SHIP_PIECES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RecoverSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SplitSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "destroyedPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endTurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getWinner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasReportedShots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isGameOver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isGameStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isTurnOver", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfDestroyedPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerHasPlacedShips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerHasPlayed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerHasReportedHits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerShots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playersAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reportHits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "takeAShot", data: BytesLike): Result;

  events: {
    "PlayerJoinedGame(address,uint256)": EventFragment;
    "PlayerLost(address)": EventFragment;
    "ShotReport(tuple,address,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PlayerJoinedGame"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerLost"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShotReport"): EventFragment;
}

export interface PlayerJoinedGameEventObject {
  player: string;
  playerIndex: BigNumber;
}
export type PlayerJoinedGameEvent = TypedEvent<
  [string, BigNumber],
  PlayerJoinedGameEventObject
>;

export type PlayerJoinedGameEventFilter =
  TypedEventFilter<PlayerJoinedGameEvent>;

export interface PlayerLostEventObject {
  player: string;
}
export type PlayerLostEvent = TypedEvent<[string], PlayerLostEventObject>;

export type PlayerLostEventFilter = TypedEventFilter<PlayerLostEvent>;

export interface ShotReportEventObject {
  coord: BattleShipGame.CoordinateStructOutput;
  target: string;
  shotBy: string;
  isHit: boolean;
}
export type ShotReportEvent = TypedEvent<
  [BattleShipGame.CoordinateStructOutput, string, string, boolean],
  ShotReportEventObject
>;

export type ShotReportEventFilter = TypedEventFilter<ShotReportEvent>;

export interface BattleShipGame extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BattleShipGameInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NO_PLAYERS(overrides?: CallOverrides): Promise<[BigNumber]>;

    NO_SHIP_PIECES(overrides?: CallOverrides): Promise<[BigNumber]>;

    RecoverSigner(
      _hashedMessage: PromiseOrValue<BytesLike>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    SplitSignature(
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number, string, string] & { v: number; r: string; s: string }>;

    destroyedPlayers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    endTurn(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getWinner(
      overrides?: CallOverrides
    ): Promise<[string] & { winner: string }>;

    hasReportedShots(overrides?: CallOverrides): Promise<[boolean]>;

    isGameOver(overrides?: CallOverrides): Promise<[boolean]>;

    isGameStarted(overrides?: CallOverrides): Promise<[boolean]>;

    isTurnOver(overrides?: CallOverrides): Promise<[boolean]>;

    joinGame(
      _playerShips: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    numberOfDestroyedPlayers(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    playerHasPlacedShips(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    playerHasPlayed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    playerHasReportedHits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    playerShots(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, number] & { x: number; y: number }>;

    players(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    playersAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    reportHits(
      _shotSignatures: BattleShipGame.ShipShotProofStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    takeAShot(
      _coord: BattleShipGame.CoordinateStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  NO_PLAYERS(overrides?: CallOverrides): Promise<BigNumber>;

  NO_SHIP_PIECES(overrides?: CallOverrides): Promise<BigNumber>;

  RecoverSigner(
    _hashedMessage: PromiseOrValue<BytesLike>,
    _v: PromiseOrValue<BigNumberish>,
    _r: PromiseOrValue<BytesLike>,
    _s: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  SplitSignature(
    sig: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[number, string, string] & { v: number; r: string; s: string }>;

  destroyedPlayers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  endTurn(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getWinner(overrides?: CallOverrides): Promise<string>;

  hasReportedShots(overrides?: CallOverrides): Promise<boolean>;

  isGameOver(overrides?: CallOverrides): Promise<boolean>;

  isGameStarted(overrides?: CallOverrides): Promise<boolean>;

  isTurnOver(overrides?: CallOverrides): Promise<boolean>;

  joinGame(
    _playerShips: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  numberOfDestroyedPlayers(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  playerHasPlacedShips(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  playerHasPlayed(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  playerHasReportedHits(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  playerShots(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[number, number] & { x: number; y: number }>;

  players(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  playersAddress(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  reportHits(
    _shotSignatures: BattleShipGame.ShipShotProofStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  takeAShot(
    _coord: BattleShipGame.CoordinateStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    NO_PLAYERS(overrides?: CallOverrides): Promise<BigNumber>;

    NO_SHIP_PIECES(overrides?: CallOverrides): Promise<BigNumber>;

    RecoverSigner(
      _hashedMessage: PromiseOrValue<BytesLike>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    SplitSignature(
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number, string, string] & { v: number; r: string; s: string }>;

    destroyedPlayers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    endTurn(overrides?: CallOverrides): Promise<boolean>;

    getWinner(overrides?: CallOverrides): Promise<string>;

    hasReportedShots(overrides?: CallOverrides): Promise<boolean>;

    isGameOver(overrides?: CallOverrides): Promise<boolean>;

    isGameStarted(overrides?: CallOverrides): Promise<boolean>;

    isTurnOver(overrides?: CallOverrides): Promise<boolean>;

    joinGame(
      _playerShips: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    numberOfDestroyedPlayers(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    playerHasPlacedShips(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    playerHasPlayed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    playerHasReportedHits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    playerShots(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, number] & { x: number; y: number }>;

    players(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    playersAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    reportHits(
      _shotSignatures: BattleShipGame.ShipShotProofStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    takeAShot(
      _coord: BattleShipGame.CoordinateStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PlayerJoinedGame(address,uint256)"(
      player?: null,
      playerIndex?: null
    ): PlayerJoinedGameEventFilter;
    PlayerJoinedGame(
      player?: null,
      playerIndex?: null
    ): PlayerJoinedGameEventFilter;

    "PlayerLost(address)"(player?: null): PlayerLostEventFilter;
    PlayerLost(player?: null): PlayerLostEventFilter;

    "ShotReport(tuple,address,address,bool)"(
      coord?: null,
      target?: null,
      shotBy?: null,
      isHit?: null
    ): ShotReportEventFilter;
    ShotReport(
      coord?: null,
      target?: null,
      shotBy?: null,
      isHit?: null
    ): ShotReportEventFilter;
  };

  estimateGas: {
    NO_PLAYERS(overrides?: CallOverrides): Promise<BigNumber>;

    NO_SHIP_PIECES(overrides?: CallOverrides): Promise<BigNumber>;

    RecoverSigner(
      _hashedMessage: PromiseOrValue<BytesLike>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SplitSignature(
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    destroyedPlayers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endTurn(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getWinner(overrides?: CallOverrides): Promise<BigNumber>;

    hasReportedShots(overrides?: CallOverrides): Promise<BigNumber>;

    isGameOver(overrides?: CallOverrides): Promise<BigNumber>;

    isGameStarted(overrides?: CallOverrides): Promise<BigNumber>;

    isTurnOver(overrides?: CallOverrides): Promise<BigNumber>;

    joinGame(
      _playerShips: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    numberOfDestroyedPlayers(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    playerHasPlacedShips(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerHasPlayed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerHasReportedHits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerShots(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    players(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playersAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reportHits(
      _shotSignatures: BattleShipGame.ShipShotProofStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    takeAShot(
      _coord: BattleShipGame.CoordinateStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NO_PLAYERS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NO_SHIP_PIECES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RecoverSigner(
      _hashedMessage: PromiseOrValue<BytesLike>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SplitSignature(
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    destroyedPlayers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endTurn(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getWinner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasReportedShots(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isGameOver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isGameStarted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTurnOver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    joinGame(
      _playerShips: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    numberOfDestroyedPlayers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playerHasPlacedShips(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playerHasPlayed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playerHasReportedHits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playerShots(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    players(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playersAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reportHits(
      _shotSignatures: BattleShipGame.ShipShotProofStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    takeAShot(
      _coord: BattleShipGame.CoordinateStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
